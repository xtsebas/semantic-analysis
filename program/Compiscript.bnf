<program> ::= { <statement> } EOF

<statement> ::= <variableDeclaration>
              | <constantDeclaration>
              | <assignment>
              | <functionDeclaration>
              | <classDeclaration>
              | <expressionStatement>
              | <printStatement>
              | <block>
              | <ifStatement>
              | <whileStatement>
              | <doWhileStatement>
              | <forStatement>
              | <foreachStatement>
              | <tryCatchStatement>
              | <switchStatement>
              | <breakStatement>
              | <continueStatement>
              | <returnStatement>

<block> ::= '{' { <statement> } '}'

<variableDeclaration> ::= ("let" | "var") <Identifier> [ <typeAnnotation> ] [ <initializer> ] ";"
<constantDeclaration> ::= "const" <Identifier> [ <typeAnnotation> ] "=" <expression> ";"
<typeAnnotation> ::= ":" <type>
<initializer> ::= "=" <expression>

<assignment> ::= <Identifier> "=" <expression> ";"
              | <expression> "." <Identifier> "=" <expression> ";"

<expressionStatement> ::= <expression> ";"
<printStatement> ::= "print" "(" <expression> ")" ";"

<ifStatement> ::= "if" "(" <expression> ")" <block> [ "else" <block> ]
<whileStatement> ::= "while" "(" <expression> ")" <block>
<doWhileStatement> ::= "do" <block> "while" "(" <expression> ")" ";"
<forStatement> ::= "for" "(" ( <variableDeclaration> | <assignment> | ";" ) [ <expression> ] ";" [ <expression> ] ")" <block>
<foreachStatement> ::= "foreach" "(" <Identifier> "in" <expression> ")" <block>
<breakStatement> ::= "break" ";"
<continueStatement> ::= "continue" ";"
<returnStatement> ::= "return" [ <expression> ] ";"

<tryCatchStatement> ::= "try" <block> "catch" "(" <Identifier> ")" <block>

<switchStatement> ::= "switch" "(" <expression> ")" "{" { <switchCase> } [ <defaultCase> ] "}"
<switchCase> ::= "case" <expression> ":" { <statement> }
<defaultCase> ::= "default" ":" { <statement> }

<functionDeclaration> ::= "function" <Identifier> "(" [ <parameters> ] ")" [ ":" <type> ] <block>
<parameters> ::= <parameter> { "," <parameter> }
<parameter> ::= <Identifier> [ ":" <type> ]

<classDeclaration> ::= "class" <Identifier> [ ":" <Identifier> ] "{" { <classMember> } "}"
<classMember> ::= <functionDeclaration> | <variableDeclaration> | <constantDeclaration>

<expression> ::= <assignmentExpr>

<assignmentExpr> ::= <leftHandSide> "=" <assignmentExpr>
                  | <leftHandSide> "." <Identifier> "=" <assignmentExpr>
                  | <conditionalExpr>

<conditionalExpr> ::= <logicalOrExpr> [ "?" <expression> ":" <expression> ]

<logicalOrExpr> ::= <logicalAndExpr> { "||" <logicalAndExpr> }
<logicalAndExpr> ::= <equalityExpr> { "&&" <equalityExpr> }
<equalityExpr> ::= <relationalExpr> { ("==" | "!=") <relationalExpr> }
<relationalExpr> ::= <additiveExpr> { ("<" | "<=" | ">" | ">=") <additiveExpr> }
<additiveExpr> ::= <multiplicativeExpr> { ("+" | "-") <multiplicativeExpr> }
<multiplicativeExpr> ::= <unaryExpr> { ("*" | "/" | "%") <unaryExpr> }

<unaryExpr> ::= ("-" | "!") <unaryExpr>
             | <primaryExpr>

<primaryExpr> ::= <literalExpr>
                | <leftHandSide>
                | "(" <expression> ")"

<literalExpr> ::= <Literal> | <arrayLiteral> | "null" | "true" | "false"

<leftHandSide> ::= <primaryAtom> { <suffixOp> }

<primaryAtom> ::= <Identifier>
                | "new" <Identifier> "(" [ <arguments> ] ")" 
                | "this"

<suffixOp> ::= "(" [ <arguments> ] ")"
             | "[" <expression> "]"
             | "." <Identifier>

<arguments> ::= <expression> { "," <expression> }
<arrayLiteral> ::= "[" [ <expression> { "," <expression> } ] "]"

<type> ::= <baseType> { "[" "]" }
<baseType> ::= "boolean" | "integer" | "string" | <Identifier>
